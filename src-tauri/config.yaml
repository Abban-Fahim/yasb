bars:
  yasb_bar:                   # Required, label MUST be in snake_case or ClassCase e.g. "foo_bar" or "FooBar"
    thickness: 48             # Optional, default: 64, the width (or height) of the bar in pixels
    edge: "top"               # Optional, default: top, options: top|left|bottom|right
    screens: []               # Optional, default: [] (all screens), takes: list of screen names to show bar on
    win_app_bar: true         # Optional, default: false, registers bar as a Windows Application Desktop Toolbar (e.g. a custom taskbar)
    always_on_top: true       # Optional, default: false, ensures bar is always at TOPMOST window level.
    blur_effect: null         # Optional, default: None, options: blur|acrylic|mica. Mica works on Windows 11 only. Acrylic may have poor performance.
    transparency: true        # Optional, default: true, enables fully transparent windows. Disable to see a white fallback window background.
    widgets:                  # Provide a list of widgets for left, middle and right bar columns
      left: [ komorebi_workspaces, active_window ]
      middle: [ clock_widget ]
      right: [
        net_usage_widget,
        mem_usage_widget,
        cpu_usage_widget,
        uptime_widget,
        custom_weather_widget,
        hostname_widget,
        # custom_ipinfo_widget
      ]

widgets:
  left_widget:
    kind: TextWidget
    text: "yasb"
  
  clock_widget:
    kind: DateTimeWidget
    formats: ['mediumTime', 'mediumDate']
    timezones: ['GMT', 'EST']
    calendar:
      locale: "jp"
      width: 300
      height: 350
    callbacks:
      on_left: "calendar"
      on_right: "next_timezone"
  
  komorebi_workspaces:
    kind: KomorebiWorkspaceWidget
    label: "${ws.name ?? ws.index + 1}"
    label_tooltip: "${JSON.stringify(ws, null, 2)}"
    label_offline: "Komorebi Offline"
    hide_empty: false
    cycle_on_scroll: true
  
  uptime_widget:
    kind: SysInfoWidget
    # For humianizer formatting: https://github.com/EvanHahn/HumanizeDuration.js
    label: "${faIcon('fa-clock-rotate-left')} ${humanizer(data.sys.uptime * 1000, { language: 'shorter', delimiter: ' ', spacer: '', round: true, units: ['d', 'h', 'm'] })}" 
    label_alt: "${faIcon('fa-clock-rotate-left')} ${new Date(data.sys.boot_time * 1000).toLocaleString()}"
    interval: 1000
    callbacks:
      on_left: "toggle_label"
  
  hostname_widget:
    kind: SysInfoWidget
    label: "${data.sys.host}"
  
  cpu_usage_widget:
    kind: SysInfoWidget
    label: "${faIcon('fa-microchip')} ${percent(data.sys.cpu_info.cpu_usage, 100)}"
    interval: 1000
    json_viewer:
      expanded: true
      max_depth: 1
      from_child: "data.cpu"
    callbacks:
      on_left: "json_viewer"
      on_right: "toggle_label"

  mem_usage_widget:
    kind: SysInfoWidget
    label: "${faIcon('fa-memory')} ${percent(data.mem.mem_used, data.mem.mem_total)}"
    interval: 1000

  net_usage_widget:
    kind: SysInfoWidget
    label: "${faIcon('fa-arrow-down-long')} ${pBytes(data.networks['Wi-Fi'].received)}/s"
    label_alt: "${faIcon('fa-arrow-up-long')} ${pBytes(data.networks['Wi-Fi'].transmitted)}/s"
    interval: 1000
    callbacks:
      on_left: "toggle_label"
  
  active_window:
    kind: ActiveWindowWidget
    label: "${data.title}"
    label_alt: "class=${data.class} exe=${data.exe_name}"
    label_max_len: 64
    is_monitor_exclusive: true
    json_viewer:
      width: 800
      height: 300
      expanded: false
    callbacks:
      on_left: "json_viewer"
      on_right: { exec: { cmd: "cmd.exe", args: ["/c", "start", "https://google.com/?q=${data.exe_name}"] } }

  custom_weather_widget:
    kind: CustomWidget
    label: "${faIcon('fa-temperature-quarter right')} ${data.current_weather.temperature}Â°c"
    label_alt: "${faIcon('fa-wind')} ${data.current_weather.windspeed}"
    command:
      cmd: "curl.exe"
      # See https://open-meteo.com/en/docs
      args: ["https://api.open-meteo.com/v1/forecast?current_weather=true&temperature_unit=celsius&latitude=55.87&longitude=-4.26"]
      # Poll every 30 minutes
      interval: 1800000
    callbacks:
      on_left: "toggle_label"
      on_right: "json_viewer"

  custom_ipinfo_widget:
    kind: CustomWidget
    class: "ip_info"
    label: "${faIcon('fa-location-dot')} ${data.city}, ${data.country}"
    label_alt: "${faIcon('fa-location-arrow')} ${data.ip}"
    command:
      cmd: "curl.exe"
      args: ["https://ipinfo.io"]
      # Poll every 10 minutes
      interval: 600000
    callbacks:
      on_left: { exec: { cmd: "cmd.exe", args: ["/c", "start", "https://ipinfo.io/${data.ip}"] } }
      on_hover: "toggle_label"
